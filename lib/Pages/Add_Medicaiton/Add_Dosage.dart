import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:intl/intl.dart';

import '../add_dose.dart'; // Required for TimeOfDay format

class AddDosagePage extends StatelessWidget {
  final GlobalKey<FormState> formKey;
  final TextEditingController dosageController;
  final String dosageUnit;
  final List<String> dosageUnits;
  final String frequencyType;
  final List<String> frequencyTypes;
  final int frequencyNumber;
  final List<int> frequencyNumbers;
  final List<TimeOfDay?> selectedTimes;
  final List<bool> isAutoGeneratedTimes;
  final Set<int> selectedWeekdays;
  final Map<int, TimeOfDay?> weeklyTimes;
  final Map<int, bool> weeklyAutoGenerated;
  final Function(String?) onDosageUnitChanged;
  final Function(int?) onFrequencyNumberChanged;
  final Function(String?) onFrequencyTypeChanged;
  final Function(int) onSelectTime; // For daily
  final Function(int, bool) onWeekdaySelected; // For weekly day toggle
  final Function(int) onSelectWeeklyTime; // For weekly time selection
  final VoidCallback onApplySameTimeToAllWeekdays;
  final VoidCallback onNext;
  final VoidCallback onBack;
  final String Function(int) getDayName; // Function to get day name

  const AddDosagePage({
    Key? key,
    required this.formKey,
    required this.dosageController,
    required this.dosageUnit,
    required this.dosageUnits,
    required this.frequencyType,
    required this.frequencyTypes,
    required this.frequencyNumber,
    required this.frequencyNumbers,
    required this.selectedTimes,
    required this.isAutoGeneratedTimes,
    required this.selectedWeekdays,
    required this.weeklyTimes,
    required this.weeklyAutoGenerated,
    required this.onDosageUnitChanged,
    required this.onFrequencyNumberChanged,
    required this.onFrequencyTypeChanged,
    required this.onSelectTime,
    required this.onWeekdaySelected,
    required this.onSelectWeeklyTime,
    required this.onApplySameTimeToAllWeekdays,
    required this.onNext,
    required this.onBack,
    required this.getDayName,
  }) : super(key: key);


  // --- Weekly Schedule Section UI ---
  Widget _buildWeeklyScheduleSection(BuildContext context) {
    List<int> sortedDays = selectedWeekdays.toList()..sort();
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          "جدول الجرعات الأسبوعي",
          style: TextStyle(fontSize: 16, color: Colors.grey.shade700),
        ),
        const SizedBox(height: 8),
        // Day selection chips.
        Wrap(
          spacing: 8.0,
          children: List.generate(7, (index) {
            int day = index + 1;
            bool selected = selectedWeekdays.contains(day);
            return FilterChip(
              label: Text(getDayName(day)), // Use passed function
              selected: selected,
              onSelected: (value) {
                onWeekdaySelected(day, value); // Use callback
              },
              selectedColor: Colors.blue.shade300,
              checkmarkColor: Colors.white,
              backgroundColor: Colors.grey.shade200,
            );
          }),
        ),
        if (selectedWeekdays.isEmpty)
          Padding(
            padding: const EdgeInsets.only(top: 4),
            child: Text(
              "الرجاء اختيار يوم واحد على الأقل",
              style: TextStyle(fontSize: 12, color: Colors.red.shade700),
            ),
          )
        else
          Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              const SizedBox(height: 10),
              ElevatedButton(
                onPressed: onApplySameTimeToAllWeekdays, // Use callback
                child: const Text("تطبيق نفس الوقت لجميع الأيام"),
              ),
              const SizedBox(height: 10),
              // Display a time picker for each selected day.
              Column(
                children: sortedDays.map((day) {
                  final time = weeklyTimes[day];
                  final isAuto = weeklyAutoGenerated[day] ?? false;
                  return Card(
                    margin: const EdgeInsets.symmetric(vertical: 6.0),
                    elevation: 1.0,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                    child: ListTile(
                      leading: Text(
                        getDayName(day), // Use passed function
                        style: const TextStyle(fontSize: 16),
                      ),
                      title: InkWell(
                        onTap: () => onSelectWeeklyTime(day), // Use callback
                        child: Text(
                          time == null
                              ? "اضغط لاختيار الوقت"
                          // Use TimeUtils from imported add_dose.dart
                              : TimeUtils.formatTimeOfDay(context, time),
                          textAlign: TextAlign.center,
                          style: TextStyle(
                            fontSize: 16,
                            color: time == null ? Colors.grey.shade600 : Colors.black87,
                          ),
                        ),
                      ),
                      trailing: Icon(
                        time == null
                            ? Icons.edit_calendar_outlined
                            : (isAuto ? Icons.smart_toy : Icons.person),
                        size: 16,
                        color: Colors.grey,
                      ),
                    ),
                  );
                }).toList(),
              ),
              // Validation message if any weekly time is missing
              if (selectedWeekdays.isNotEmpty && weeklyTimes.length < selectedWeekdays.length)
                Padding(
                  padding: const EdgeInsets.only(top: 8.0),
                  child: Text(
                    'الرجاء تحديد الأوقات لجميع الأيام المختارة.',
                    textAlign: TextAlign.center,
                    style: TextStyle(color: Colors.red.shade700, fontSize: 13),
                  ),
                ),
            ],
          ),
      ],
    );
  }


  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final horizontalPadding = screenWidth * 0.06;
    const verticalPadding = 20.0;

    // Determine if all required times are selected for validation purposes
    bool allTimesSelected = frequencyType == 'يومي'
        ? !selectedTimes.any((t) => t == null) // Check daily times
        : (selectedWeekdays.isEmpty || weeklyTimes.length == selectedWeekdays.length); // Check weekly times

    return Form(
      key: formKey, // Use passed key
      child: Padding(
        padding: EdgeInsets.symmetric(horizontal: horizontalPadding, vertical: verticalPadding),
        child: Stack(
          children: [
            Positioned(
              top: 15,
              left: -10,
              child: IconButton(
                icon: Icon(Icons.arrow_back, color: Colors.blue.shade800, size: 28),
                onPressed: onBack, // Use callback
              ),
            ),
            Center(
              child: SingleChildScrollView(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    const SizedBox(height: 50),
                    Text(
                      "الجرعة والأوقات",
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        fontSize: screenWidth * 0.07,
                        fontWeight: FontWeight.bold,
                        color: Colors.blue.shade800,
                      ),
                    ),
                    const SizedBox(height: 25.0),
                    // --- Dosage Amount and Unit ---
                    Row(
                      crossAxisAlignment: CrossAxisAlignment.center, // Align items vertically
                      children: [
                        Icon(Icons.science_outlined, color: Colors.blue.shade800),
                        const SizedBox(width: 8),
                        Expanded(
                          flex: 3,
                          child: TextFormField(
                            controller: dosageController, // Use passed controller
                            textAlign: TextAlign.center,
                            keyboardType: const TextInputType.numberWithOptions(decimal: true),
                            inputFormatters: [
                              FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*')),
                            ],
                            decoration: InputDecoration(
                              labelText: 'الجرعة',
                              border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
                              focusedBorder: OutlineInputBorder(
                                borderSide: BorderSide(color: Colors.blue.shade800, width: 2.0),
                                borderRadius: BorderRadius.circular(12),
                              ),
                              // Ensure label floats correctly
                              floatingLabelBehavior: FloatingLabelBehavior.auto,
                            ),
                            validator: (value) {
                              if (value == null || value.trim().isEmpty) {
                                return 'ادخل الجرعة';
                              }
                              if (double.tryParse(value.trim()) == null) {
                                return 'أدخل رقماً صحيحاً';
                              }
                              return null;
                            },
                          ),
                        ),
                        const SizedBox(width: 10),
                        Expanded(
                          flex: 2,
                          child: DropdownButtonFormField<String>(
                            value: dosageUnit, // Use passed value
                            decoration: InputDecoration(
                              // Removed labelText, rely on value
                              contentPadding: const EdgeInsets.symmetric(horizontal: 10, vertical: 14), // Adjust padding
                              border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
                              focusedBorder: OutlineInputBorder(
                                borderSide: BorderSide(color: Colors.blue.shade800, width: 2.0),
                                borderRadius: BorderRadius.circular(12),
                              ),
                            ),
                            onChanged: (value) => onDosageUnitChanged(value), // Use callback
                            items: dosageUnits // Use passed list
                                .map((unit) => DropdownMenuItem(value: unit, child: Text(unit)))
                                .toList(),
                            // Add validator if needed, e.g., ensure a unit is selected
                            validator: (value) => value == null ? 'اختر الوحدة' : null,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 20.0),
                    // --- Frequency Number and Type ---
                    Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Only show frequency number if the frequency type is daily.
                        if (frequencyType == 'يومي') ...[
                          Icon(Icons.repeat, color: Colors.blue.shade800),
                          const SizedBox(width: 8),
                          Expanded(
                            child: DropdownButtonFormField<int>(
                              value: frequencyNumber, // Use passed value
                              decoration: InputDecoration(
                                labelText: 'عدد المرات',
                                border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: BorderSide(color: Colors.blue.shade800, width: 2.0),
                                  borderRadius: BorderRadius.circular(12),
                                ),
                              ),
                              onChanged: (value) => onFrequencyNumberChanged(value), // Use callback
                              items: frequencyNumbers // Use passed list
                                  .map((num) => DropdownMenuItem(value: num, child: Text(num.toString())))
                                  .toList(),
                              validator: (value) => value == null ? 'اختر العدد' : null,
                            ),
                          ),
                          const SizedBox(width: 10),
                        ],
                        // Frequency Type dropdown (always shown)
                        Icon(Icons.calendar_today_outlined, color: Colors.blue.shade800),
                        const SizedBox(width: 8),
                        Expanded(
                          // Adjust flex based on whether the number dropdown is visible
                          flex: frequencyType == 'يومي' ? 1 : 2,
                          child: DropdownButtonFormField<String>(
                            value: frequencyType, // Use passed value
                            decoration: InputDecoration(
                              labelText: 'النوع',
                              border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
                              focusedBorder: OutlineInputBorder(
                                borderSide: BorderSide(color: Colors.blue.shade800, width: 2.0),
                                borderRadius: BorderRadius.circular(12),
                              ),
                            ),
                            onChanged: (value) => onFrequencyTypeChanged(value), // Use callback
                            items: frequencyTypes // Use passed list
                                .map((type) => DropdownMenuItem(value: type, child: Text(type)))
                                .toList(),
                            validator: (value) => value == null ? 'اختر النوع' : null,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 25.0),
                    // --- Time Selection Section (Conditional) ---
                    frequencyType == 'يومي'
                        ? Column( // Daily Time Selection
                      children: [
                        Text(
                          "أوقات تناول الجرعة:",
                          style: TextStyle(fontSize: 16, color: Colors.grey.shade700),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 10),
                        ListView.builder(
                          shrinkWrap: true,
                          physics: const NeverScrollableScrollPhysics(),
                          itemCount: frequencyNumber, // Use passed value
                          itemBuilder: (context, index) {
                            final time = selectedTimes[index];
                            final isAuto = isAutoGeneratedTimes[index];
                            return Card(
                              margin: const EdgeInsets.symmetric(vertical: 6.0),
                              elevation: 1.0,
                              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
                              child: ListTile(
                                leading: Icon(Icons.access_time_filled, color: Colors.blue.shade700),
                                title: Row(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [
                                    Text('${index + 1}. ', style: const TextStyle(fontSize: 16)),
                                    Text(
                                      time == null
                                          ? 'اضغط لاختيار الوقت'
                                      // Use TimeUtils for formatting
                                          : TimeUtils.formatTimeOfDay(context, time),
                                      style: TextStyle(
                                        fontSize: 16,
                                        fontWeight: time == null ? FontWeight.normal : FontWeight.bold,
                                        color: time == null ? Colors.grey.shade600 : Colors.black87,
                                      ),
                                    ),
                                    const SizedBox(width: 4),
                                    if (time != null)
                                      Icon(
                                        isAuto ? Icons.smart_toy : Icons.person,
                                        size: 16,
                                        color: Colors.grey,
                                      ),
                                  ],
                                ),
                                trailing: const Icon(Icons.edit_calendar_outlined),
                                onTap: () => onSelectTime(index), // Use callback
                              ),
                            );
                          },
                        ),
                        // Validation message if any daily time is missing
                        if (selectedTimes.any((t) => t == null))
                          Padding(
                            padding: const EdgeInsets.only(top: 8.0),
                            child: Text(
                              'الرجاء تحديد جميع الأوقات المطلوبة.',
                              textAlign: TextAlign.center,
                              style: TextStyle(color: Colors.red.shade700, fontSize: 13),
                            ),
                          ),
                      ],
                    )
                        : _buildWeeklyScheduleSection(context), // Weekly Time Selection
                    const SizedBox(height: 30.0),
                    // --- Next Button ---
                    ElevatedButton(
                      onPressed: () {
                        // Validate form AND check if all required times are selected
                        if (formKey.currentState!.validate() && allTimesSelected) {
                          onNext(); // Use callback
                        } else if (!allTimesSelected) {
                          // Show snackbar if times are missing
                          ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(content: Text('الرجاء تحديد جميع أوقات الجرعات المطلوبة')));
                        }
                      },
                      style: ElevatedButton.styleFrom(
                        minimumSize: Size(double.infinity, 55),
                        backgroundColor: Colors.blue.shade800,
                        foregroundColor: Colors.white,
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
                        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 15),
                        textStyle: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                      ),
                      child: const Text('التالي'),
                    ),
                    const SizedBox(height: 20),
                  ],
                ),
              ),
            )
          ],
        ),
      ),
    );
  }
}