import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:intl/intl.dart';
import '../Add_Medication_Page.dart';


//TODO : WARNAING FOR DOSAGE TIME
//TODO : AUTO TIMEING RESET

// Constants for theming
// Hospital Blue Color Theme
const Color kPrimaryColor = Color(0xFF2E86C1); // Medium hospital blue
const Color kSecondaryColor = Color(0xFF5DADE2); // Light hospital blue
const Color kErrorColor = Color(0xFFFF6B6B); // Error red
const Color kBackgroundColor = Color(0xFFF5F8FA); // Very light blue-gray background
const Color kCardColor = Colors.white;
const double kBorderRadius = 16.0;
const double kSpacing = 18.0;

class AddDosagePage extends StatelessWidget {
  final GlobalKey<FormState> formKey;
  final TextEditingController dosageController;
  final String dosageUnit;
  final List<String> dosageUnits;
  final String frequencyType;
  final List<String> frequencyTypes;
  final int frequencyNumber;
  final List<int> frequencyNumbers;
  final List<TimeOfDay?> selectedTimes;
  final List<bool> isAutoGeneratedTimes;
  final Set<int> selectedWeekdays;
  final Map<int, TimeOfDay?> weeklyTimes;
  final Map<int, bool> weeklyAutoGenerated;
  final Function(String?) onDosageUnitChanged;
  final Function(int?) onFrequencyNumberChanged;
  final Function(String?) onFrequencyTypeChanged;
  final Function(int) onSelectTime;
  final Function(int, bool) onWeekdaySelected;
  final Function(int) onSelectWeeklyTime;
  final VoidCallback onApplySameTimeToAllWeekdays;
  final VoidCallback onNext;
  final VoidCallback onBack;
  final String Function(int) getDayName;

  const AddDosagePage({
    Key? key,
    required this.formKey,
    required this.dosageController,
    required this.dosageUnit,
    required this.dosageUnits,
    required this.frequencyType,
    required this.frequencyTypes,
    required this.frequencyNumber,
    required this.frequencyNumbers,
    required this.selectedTimes,
    required this.isAutoGeneratedTimes,
    required this.selectedWeekdays,
    required this.weeklyTimes,
    required this.weeklyAutoGenerated,
    required this.onDosageUnitChanged,
    required this.onFrequencyNumberChanged,
    required this.onFrequencyTypeChanged,
    required this.onSelectTime,
    required this.onWeekdaySelected,
    required this.onSelectWeeklyTime,
    required this.onApplySameTimeToAllWeekdays,
    required this.onNext,
    required this.onBack,
    required this.getDayName,
  }) : super(key: key);

  // --- Weekly Schedule Section UI ---
  Widget _buildWeeklyScheduleSection(BuildContext context) {
    // Sort the days according to the week order (Sunday to Saturday in Arabic convention)
    // Using 1=Monday through 7=Sunday ISO standard
    List<int> allDays = [1, 2, 3, 4, 5, 6, 7]; // Monday to Sunday

    // Create a sorted list of selected days
    List<int> sortedDays = selectedWeekdays.toList()..sort();

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: kCardColor,
        borderRadius: BorderRadius.circular(kBorderRadius),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.calendar_today, color: kPrimaryColor),
              const SizedBox(width: 10),
              Text(
                "جدول الجرعات الأسبوعي",
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.grey.shade800,
                ),
              ),
            ],
          ),
          const Divider(height: 24),

          // Instructions text
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: kSecondaryColor.withOpacity(0.1),
              borderRadius: BorderRadius.circular(kBorderRadius / 2),
              border: Border.all(color: kSecondaryColor.withOpacity(0.3)),
            ),
            child: Row(
              children: [
                Icon(Icons.info_outline, color: kSecondaryColor, size: 20),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    "اختر الأيام التي تحتاج لتناول الدواء فيها وحدد الوقت لكل يوم",
                    style: TextStyle(
                      fontSize: 13,
                      color: Colors.grey.shade700,
                    ),
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: 16),

          // Day selection chips with improved styling and layout
          const Text(
            "أيام الأسبوع:",
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w500,
              color: Colors.black87,
            ),
          ),
          const SizedBox(height: 8),

          // Fixed to use horizontal ListView for full weekday names
          SizedBox(
            height: 56,
            child: ListView(
              scrollDirection: Axis.horizontal,
              children: allDays.map((day) {
                bool selected = selectedWeekdays.contains(day);
                return Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 4),
                  child: FilterChip(
                    labelPadding: const EdgeInsets.symmetric(horizontal: 8),
                    labelStyle: TextStyle(
                      color: selected ? Colors.white : Colors.black87,
                      fontWeight: selected ? FontWeight.bold : FontWeight.normal,
                      fontSize: 14,
                    ),
                    label: Text(getDayName(day)), // Full day name
                    selected: selected,
                    onSelected: (value) => onWeekdaySelected(day, value),
                    selectedColor: kPrimaryColor,
                    checkmarkColor: Colors.white,
                    backgroundColor: selected ? kPrimaryColor.withOpacity(0.1) : Colors.grey.shade100,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                      side: BorderSide(
                        color: selected ? kPrimaryColor : Colors.grey.shade300,
                        width: selected ? 1.5 : 1,
                      ),
                    ),
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                    showCheckmark: false,
                  ),
                );
              }).toList(),
            ),
          ),

          if (selectedWeekdays.isEmpty)
            Padding(
              padding: const EdgeInsets.only(top: 8),
              child: Text(
                "الرجاء اختيار يوم واحد على الأقل",
                style: TextStyle(fontSize: 14, color: kErrorColor, fontWeight: FontWeight.w500),
              ),
            )
          else
            Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                const SizedBox(height: 20),

                // Apply same time button
                ElevatedButton.icon(
                  onPressed: onApplySameTimeToAllWeekdays,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: kSecondaryColor,
                    foregroundColor: Colors.white,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(kBorderRadius),
                    ),
                    padding: const EdgeInsets.symmetric(vertical: 12),
                  ),
                  icon: const Icon(Icons.access_time_filled),
                  label: const Text(
                    "تطبيق نفس الوقت لجميع الأيام",
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                ),

                const SizedBox(height: 16),

                // Display a time picker for each selected day with improved styling
                Column(
                  children: sortedDays.map((day) {
                    final time = weeklyTimes[day];
                    final isAuto = weeklyAutoGenerated[day] ?? false;
                    return Container(
                      margin: const EdgeInsets.only(bottom: 12),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(kBorderRadius),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.05),
                            blurRadius: 5,
                            offset: const Offset(0, 2),
                          ),
                        ],
                        border: Border.all(
                          color: time != null
                              ? kPrimaryColor.withOpacity(0.3)
                              : Colors.grey.shade300,
                        ),
                      ),
                      child: Material(
                        color: Colors.transparent,
                        borderRadius: BorderRadius.circular(kBorderRadius),
                        child: InkWell(
                          onTap: () => onSelectWeeklyTime(day),
                          borderRadius: BorderRadius.circular(kBorderRadius),
                          child: Padding(
                            padding: const EdgeInsets.all(16),
                            child: Row(
                              children: [
                                Container(
                                  width: 40,
                                  height: 40,
                                  decoration: BoxDecoration(
                                    color: kPrimaryColor.withOpacity(0.1),
                                    borderRadius: BorderRadius.circular(8),
                                  ),
                                  child: Center(
                                    child: Text(
                                      getDayName(day).substring(0, 2),
                                      style: TextStyle(
                                        color: kPrimaryColor,
                                        fontSize: 16,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ),
                                ),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        getDayName(day),
                                        style: const TextStyle(
                                          fontSize: 16,
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                      const SizedBox(height: 4),
                                      Row(
                                        children: [
                                          Icon(
                                            time != null
                                                ? Icons.access_time_filled
                                                : Icons.access_time,
                                            size: 16,
                                            color: time != null
                                                ? kPrimaryColor
                                                : Colors.grey.shade500,
                                          ),
                                          const SizedBox(width: 6),
                                          Text(
                                            time == null
                                                ? "اضغط لاختيار الوقت"
                                                : TimeUtils.formatTimeOfDay(context, time),
                                            style: TextStyle(
                                              fontSize: 15,
                                              fontWeight: time != null
                                                  ? FontWeight.w500
                                                  : FontWeight.normal,
                                              color: time != null
                                                  ? Colors.black87
                                                  : Colors.grey.shade600,
                                            ),
                                          ),
                                          if (time != null && isAuto)
                                            Padding(
                                              padding: const EdgeInsets.only(right: 8),
                                              child: Tooltip(
                                                message: "وقت تم إنشاؤه تلقائيًا",
                                                child: Icon(
                                                  Icons.smart_toy,
                                                  size: 14,
                                                  color: kSecondaryColor,
                                                ),
                                              ),
                                            ),
                                        ],
                                      ),
                                    ],
                                  ),
                                ),
                                Icon(
                                  Icons.edit_calendar,
                                  color: time != null
                                      ? kPrimaryColor
                                      : Colors.grey.shade400,
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    );
                  }).toList(),
                ),
              ],
            ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final horizontalPadding = screenWidth * 0.06;
    const verticalPadding = 20.0;

    // Determine if all required times are selected for validation purposes
    bool allTimesSelected = frequencyType == 'يومي'
        ? !selectedTimes.any((t) => t == null) // Check daily times
        : (selectedWeekdays.isEmpty || weeklyTimes.length == selectedWeekdays.length); // Check weekly times

    return Form(
      key: formKey,
      child: Container(
        decoration: const BoxDecoration(
          color: kBackgroundColor,
        ),
        child: SafeArea(
          child: Stack(
            children: [
              // Back button with consistent design
              Positioned(
                top: 15,
                left: 10,
                child: Material(
                  color: Colors.transparent,
                  borderRadius: BorderRadius.circular(30),
                  child: InkWell(
                    onTap: onBack,
                    borderRadius: BorderRadius.circular(30),
                    child: Container(
                      padding: const EdgeInsets.all(8.0),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        shape: BoxShape.circle,
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.05),
                            blurRadius: 8,
                            offset: const Offset(0, 2),
                          ),
                        ],
                      ),
                      child: const Icon(Icons.arrow_back, color: kPrimaryColor, size: 28),
                    ),
                  ),
                ),
              ),

              // Main content
              Padding(
                padding: EdgeInsets.only(
                  left: horizontalPadding,
                  right: horizontalPadding,
                  top: verticalPadding + 35, // Add space for back button
                  bottom: verticalPadding,
                ),
                child: SingleChildScrollView(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      // Page heading with consistent gradient styling
                      Center(
                        child: ShaderMask(
                          shaderCallback: (bounds) => LinearGradient(
                            colors: [kPrimaryColor, Color(0xFF4E7BFF)],
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                          ).createShader(bounds),
                          child: Text(
                            "الجرعة والأوقات",
                            textAlign: TextAlign.center,
                            style: TextStyle(
                              fontSize: screenWidth * 0.07,
                              fontWeight: FontWeight.bold,
                              color: Colors.white,
                            ),
                          ),
                        ),
                      ),

                      const SizedBox(height: 10),

                      // Subtitle
                      Container(
                        padding: const EdgeInsets.symmetric(vertical: 4, horizontal: 12),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(20),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.grey.withOpacity(0.2),
                              blurRadius: 4,
                              offset: const Offset(0, 2),
                            ),
                          ],
                        ),
                        child: Text(
                          "أدخل تفاصيل جرعة الدواء وأوقات تناوله",
                          textAlign: TextAlign.center,
                          style: TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.normal,
                            color: Colors.grey.shade700,
                          ),
                        ),
                      ),

                      const SizedBox(height: 25.0),

                      // Dosage Card with consistent styling
                      Container(
                        padding: const EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          color: kCardColor,
                          borderRadius: BorderRadius.circular(kBorderRadius),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.black.withOpacity(0.05),
                              blurRadius: 10,
                              offset: const Offset(0, 4),
                            ),
                          ],
                          border: Border.all(color: Colors.grey.shade100),
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              children: [
                                Icon(Icons.medication, color: kPrimaryColor),
                                const SizedBox(width: 10),
                                const Text(
                                  "تفاصيل الجرعة",
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ],
                            ),

                            const Divider(height: 24),

                            // Dosage Amount and Unit with improved styling
                            Row(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Expanded(
                                  flex: 3,
                                  child: TextFormField(
                                    controller: dosageController,
                                    textAlign: TextAlign.center,
                                    keyboardType: const TextInputType.numberWithOptions(decimal: true),
                                    inputFormatters: [
                                      FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*')),
                                    ],
                                    style: const TextStyle(
                                      fontSize: 16,
                                      fontWeight: FontWeight.w500,
                                    ),
                                    decoration: InputDecoration(
                                      labelText: 'الجرعة',
                                      labelStyle: TextStyle(
                                        color: kPrimaryColor.withOpacity(0.8),
                                        fontWeight: FontWeight.w500,
                                      ),
                                      prefixIcon: Icon(Icons.science_outlined, color: kPrimaryColor),
                                      filled: true,
                                      fillColor: Colors.white,
                                      border: OutlineInputBorder(
                                        borderRadius: BorderRadius.circular(kBorderRadius),
                                      ),
                                      focusedBorder: OutlineInputBorder(
                                        borderSide: BorderSide(color: kPrimaryColor, width: 2.0),
                                        borderRadius: BorderRadius.circular(kBorderRadius),
                                      ),
                                      enabledBorder: OutlineInputBorder(
                                        borderSide: BorderSide(color: Colors.grey.shade300),
                                        borderRadius: BorderRadius.circular(kBorderRadius),
                                      ),
                                      errorBorder: OutlineInputBorder(
                                        borderSide: BorderSide(color: kErrorColor),
                                        borderRadius: BorderRadius.circular(kBorderRadius),
                                      ),
                                      focusedErrorBorder: OutlineInputBorder(
                                        borderSide: BorderSide(color: kErrorColor, width: 2.0),
                                        borderRadius: BorderRadius.circular(kBorderRadius),
                                      ),
                                      errorStyle: TextStyle(
                                        color: kErrorColor,
                                        fontWeight: FontWeight.w500,
                                      ),
                                      contentPadding: const EdgeInsets.symmetric(
                                        vertical: 16,
                                        horizontal: 16,
                                      ),
                                    ),
                                    validator: (value) {
                                      if (value == null || value.trim().isEmpty) {
                                        return 'ادخل الجرعة';
                                      }
                                      if (double.tryParse(value.trim()) == null) {
                                        return 'أدخل رقماً صحيحاً';
                                      }
                                      return null;
                                    },
                                  ),
                                ),

                                const SizedBox(width: 12),

                                Expanded(
                                  flex: 2,
                                  child: DropdownButtonFormField<String>(
                                    value: dosageUnit,
                                    decoration: InputDecoration(
                                      labelText: 'الوحدة',
                                      labelStyle: TextStyle(
                                        color: kPrimaryColor.withOpacity(0.8),
                                        fontWeight: FontWeight.w500,
                                      ),
                                      filled: true,
                                      fillColor: Colors.white,
                                      border: OutlineInputBorder(
                                        borderRadius: BorderRadius.circular(kBorderRadius),
                                      ),
                                      focusedBorder: OutlineInputBorder(
                                        borderSide: BorderSide(color: kPrimaryColor, width: 2.0),
                                        borderRadius: BorderRadius.circular(kBorderRadius),
                                      ),
                                      enabledBorder: OutlineInputBorder(
                                        borderSide: BorderSide(color: Colors.grey.shade300),
                                        borderRadius: BorderRadius.circular(kBorderRadius),
                                      ),
                                      contentPadding: const EdgeInsets.symmetric(
                                        vertical: 16,
                                        horizontal: 16,
                                      ),
                                    ),
                                    style: const TextStyle(
                                      fontSize: 16,
                                      color: Colors.black87,
                                      fontWeight: FontWeight.w500,
                                    ),
                                    icon: Icon(Icons.arrow_drop_down, color: kPrimaryColor),
                                    onChanged: onDosageUnitChanged,
                                    items: dosageUnits
                                        .map((unit) => DropdownMenuItem(
                                      value: unit,
                                      child: Text(unit),
                                    ))
                                        .toList(),
                                    validator: (value) => value == null ? 'اختر الوحدة' : null,
                                  ),
                                ),
                              ],
                            ),

                            const SizedBox(height: 20),

                            // Frequency section
                            Row(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                // Frequency Type dropdown (always shown)
                                Expanded(
                                  flex: 1,
                                  child: DropdownButtonFormField<String>(
                                    value: frequencyType,
                                    decoration: InputDecoration(
                                      labelText: 'نوع التكرار',
                                      labelStyle: TextStyle(
                                        color: kPrimaryColor.withOpacity(0.8),
                                        fontWeight: FontWeight.w500,
                                      ),
                                      prefixIcon: Icon(Icons.calendar_today, color: kPrimaryColor),
                                      filled: true,
                                      fillColor: Colors.white,
                                      border: OutlineInputBorder(
                                        borderRadius: BorderRadius.circular(kBorderRadius),
                                      ),
                                      focusedBorder: OutlineInputBorder(
                                        borderSide: BorderSide(color: kPrimaryColor, width: 2.0),
                                        borderRadius: BorderRadius.circular(kBorderRadius),
                                      ),
                                      enabledBorder: OutlineInputBorder(
                                        borderSide: BorderSide(color: Colors.grey.shade300),
                                        borderRadius: BorderRadius.circular(kBorderRadius),
                                      ),
                                      contentPadding: const EdgeInsets.symmetric(
                                        vertical: 16,
                                        horizontal: 16,
                                      ),
                                    ),
                                    style: const TextStyle(
                                      fontSize: 16,
                                      color: Colors.black87,
                                      fontWeight: FontWeight.w500,
                                    ),
                                    icon: Icon(Icons.arrow_drop_down, color: kPrimaryColor),
                                    onChanged: onFrequencyTypeChanged,
                                    items: frequencyTypes
                                        .map((type) => DropdownMenuItem(
                                      value: type,
                                      child: Text(type),
                                    ))
                                        .toList(),
                                    validator: (value) => value == null ? 'اختر النوع' : null,
                                  ),
                                ),

                                // Only show frequency number if the frequency type is daily
                                if (frequencyType == 'يومي') ...[
                                  const SizedBox(width: 12),
                                  Expanded(
                                    child: DropdownButtonFormField<int>(
                                      value: frequencyNumber,
                                      decoration: InputDecoration(
                                        labelText: 'عدد المرات',
                                        labelStyle: TextStyle(
                                          color: kPrimaryColor.withOpacity(0.8),
                                          fontWeight: FontWeight.w500,
                                        ),
                                        prefixIcon: Icon(Icons.repeat, color: kPrimaryColor),
                                        filled: true,
                                        fillColor: Colors.white,
                                        border: OutlineInputBorder(
                                          borderRadius: BorderRadius.circular(kBorderRadius),
                                        ),
                                        focusedBorder: OutlineInputBorder(
                                          borderSide: BorderSide(color: kPrimaryColor, width: 2.0),
                                          borderRadius: BorderRadius.circular(kBorderRadius),
                                        ),
                                        enabledBorder: OutlineInputBorder(
                                          borderSide: BorderSide(color: Colors.grey.shade300),
                                          borderRadius: BorderRadius.circular(kBorderRadius),
                                        ),
                                        contentPadding: const EdgeInsets.symmetric(
                                          vertical: 16,
                                          horizontal: 16,
                                        ),
                                      ),
                                      style: const TextStyle(
                                        fontSize: 16,
                                        color: Colors.black87,
                                        fontWeight: FontWeight.w500,
                                      ),
                                      icon: Icon(Icons.arrow_drop_down, color: kPrimaryColor),
                                      onChanged: onFrequencyNumberChanged,
                                      items: frequencyNumbers
                                          .map((num) => DropdownMenuItem(
                                        value: num,
                                        child: Text(num.toString()),
                                      ))
                                          .toList(),
                                      validator: (value) => value == null ? 'اختر العدد' : null,
                                    ),
                                  ),
                                ],
                              ],
                            ),
                          ],
                        ),
                      ),

                      const SizedBox(height: 25.0),

                      // Time Selection Section (Conditional)
                      frequencyType == 'يومي'
                          ? Container(
                        padding: const EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          color: kCardColor,
                          borderRadius: BorderRadius.circular(kBorderRadius),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.black.withOpacity(0.05),
                              blurRadius: 10,
                              offset: const Offset(0, 4),
                            ),
                          ],
                          border: Border.all(color: Colors.grey.shade100),
                        ),
                        child: Column(
                          children: [
                            Row(
                              children: [
                                Icon(Icons.access_time_filled, color: kPrimaryColor),
                                const SizedBox(width: 10),
                                Text(
                                  "أوقات تناول الجرعة:",
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                    color: Colors.grey.shade800,
                                  ),
                                ),
                              ],
                            ),

                            const Divider(height: 24),

                            // Daily time selection list with improved styling
                            ListView.builder(
                              shrinkWrap: true,
                              physics: const NeverScrollableScrollPhysics(),
                              itemCount: frequencyNumber,
                              itemBuilder: (context, index) {
                                final time = selectedTimes[index];
                                final isAuto = isAutoGeneratedTimes[index];

                                return Container(
                                  margin: const EdgeInsets.only(bottom: 12),
                                  decoration: BoxDecoration(
                                    color: time != null
                                        ? kPrimaryColor.withOpacity(0.05)
                                        : Colors.grey.shade50,
                                    borderRadius: BorderRadius.circular(kBorderRadius),
                                    border: Border.all(
                                      color: time != null
                                          ? kPrimaryColor.withOpacity(0.3)
                                          : Colors.grey.shade300,
                                      width: time != null ? 1.5 : 1,
                                    ),
                                  ),
                                  child: Material(
                                    color: Colors.transparent,
                                    borderRadius: BorderRadius.circular(kBorderRadius),
                                    child: InkWell(
                                      onTap: () => onSelectTime(index),
                                      borderRadius: BorderRadius.circular(kBorderRadius),
                                      child: Padding(
                                        padding: const EdgeInsets.all(16),
                                        child: Row(
                                          children: [
                                            Container(
                                              width: 36,
                                              height: 36,
                                              decoration: BoxDecoration(
                                                color: time != null
                                                    ? kPrimaryColor
                                                    : Colors.grey.shade300,
                                                shape: BoxShape.circle,
                                              ),
                                              child: Center(
                                                child: Text(
                                                  '${index + 1}',
                                                  style: TextStyle(
                                                    color: time != null
                                                        ? Colors.white
                                                        : Colors.grey.shade700,
                                                    fontSize: 16,
                                                    fontWeight: FontWeight.bold,
                                                  ),
                                                ),
                                              ),
                                            ),
                                            const SizedBox(width: 16),
                                            Expanded(
                                              child: Column(
                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                children: [
                                                  Text(
                                                    time == null
                                                        ? 'الجرعة ${index + 1}'
                                                        : 'الجرعة ${index + 1} (${time.format(context)})',
                                                    style: TextStyle(
                                                      fontSize: 15,
                                                      fontWeight: time != null
                                                          ? FontWeight.w600
                                                          : FontWeight.normal,
                                                      color: time != null
                                                          ? Colors.black87
                                                          : Colors.grey.shade700,
                                                    ),
                                                  ),
                                                  const SizedBox(height: 4),
                                                  Row(
                                                    children: [
                                                      Icon(
                                                        time != null
                                                            ? Icons.check_circle
                                                            : Icons.access_time,
                                                        size: 14,
                                                        color: time != null
                                                            ? Colors.green
                                                            : Colors.grey.shade500,
                                                      ),
                                                      const SizedBox(width: 6),
                                                      Text(
                                                        time == null
                                                            ? 'اضغط لاختيار الوقت'
                                                            : TimeUtils.formatTimeOfDay(context, time),
                                                        style: TextStyle(
                                                          fontSize: 14,
                                                          color: time != null
                                                              ? Colors.black87
                                                              : Colors.grey.shade600,
                                                        ),
                                                      ),
                                                      if (time != null && isAuto)
                                                        Padding(
                                                          padding: const EdgeInsets.only(right: 8),
                                                          child: Tooltip(
                                                            message: "وقت تم إنشاؤه تلقائيًا",
                                                            child: Icon(
                                                              Icons.smart_toy,
                                                              size: 14,
                                                              color: kSecondaryColor,
                                                            ),
                                                          ),
                                                        ),
                                                    ],
                                                  ),
                                                ],
                                              ),
                                            ),
                                            Container(
                                              width: 36,
                                              height: 36,
                                              decoration: BoxDecoration(
                                                color: kPrimaryColor.withOpacity(0.1),
                                                shape: BoxShape.circle,
                                              ),
                                              child: Icon(
                                                Icons.edit,
                                                color: kPrimaryColor,
                                                size: 18,
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                  ),
                                );
                              },
                            ),

                            // Validation message if any daily time is missing
                            if (selectedTimes.any((t) => t == null))
                              Container(
                                margin: const EdgeInsets.only(top: 8.0),
                                padding: const EdgeInsets.all(8.0),
                                decoration: BoxDecoration(
                                  color: kErrorColor.withOpacity(0.1),
                                  borderRadius: BorderRadius.circular(kBorderRadius / 2),
                                  border: Border.all(color: kErrorColor.withOpacity(0.3)),
                                ),
                                child: Row(
                                  children: [
                                    Icon(Icons.info_outline, color: kErrorColor, size: 18),
                                    const SizedBox(width: 8),
                                    Expanded(
                                      child: Text(
                                        'الرجاء تحديد جميع الأوقات المطلوبة.',
                                        style: TextStyle(
                                          color: kErrorColor,
                                          fontSize: 13,
                                          fontWeight: FontWeight.w500,
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                          ],
                        ),
                      )
                          : _buildWeeklyScheduleSection(context),

                      const SizedBox(height: 30.0),

                      // Next Button with consistent styling
                      ElevatedButton(
                        onPressed: () {
                          if (formKey.currentState!.validate() && allTimesSelected) {
                            onNext();
                          } else if (!allTimesSelected) {
                            // Show snackbar if times are missing
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Row(
                                  children: [
                                    const Icon(Icons.warning_amber_rounded, color: Colors.white),
                                    const SizedBox(width: 12),
                                    const Expanded(
                                      child: Text(
                                        'الرجاء تحديد جميع أوقات الجرعات المطلوبة',
                                        style: TextStyle(fontWeight: FontWeight.bold),
                                      ),
                                    ),
                                  ],
                                ),
                                backgroundColor: kErrorColor,
                                behavior: SnackBarBehavior.floating,
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(10),
                                ),
                                duration: const Duration(seconds: 3),
                              ),
                            );
                          }
                        },
                        style: ElevatedButton.styleFrom(
                          minimumSize: const Size(double.infinity, 55),
                          backgroundColor: kPrimaryColor,
                          foregroundColor: Colors.white,
                          elevation: 4,
                          shadowColor: kPrimaryColor.withOpacity(0.4),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(kBorderRadius),
                          ),
                        ),
                        child: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            const Text(
                              'التالي',
                              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                            ),
                            const SizedBox(width: 8),
                            Container(
                              padding: const EdgeInsets.all(4),
                              decoration: BoxDecoration(
                                color: Colors.white.withOpacity(0.2),
                                shape: BoxShape.circle,
                              ),
                              child: const Icon(Icons.arrow_forward, size: 16),
                            ),
                          ],
                        ),
                      ),
                      const SizedBox(height: 20),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}