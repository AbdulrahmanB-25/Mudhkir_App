import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:image_picker/image_picker.dart';
import 'package:intl/intl.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:http/http.dart' as http;

class EditMedicationDataProvider {
  //======== State & Controllers ========
  final TextEditingController nameController;
  final TextEditingController dosageController;
  final PageController pageController = PageController();

  String imgbbApiKey = '2b30d3479663bc30a70c916363b07c4a';

  List<String> _medicineNames = [];
  File? _capturedImage;
  String? _uploadedImageUrl;
  bool _isUploading = false;
  bool _isLoading = true;
  bool _hasOriginalImage = false;

  String _dosageUnit = 'ملغم';
  String _frequencyType = 'يومي';
  int _frequencyNumber = 1;

  List<TimeOfDay?> _selectedTimes = [];
  List<bool> _isAutoGeneratedTimes = [];

  Set<int> _selectedWeekdays = {};
  Map<int, TimeOfDay?> _weeklyTimes = {};
  Map<int, bool> _weeklyAutoGenerated = {};

  DateTime? _startDate;
  DateTime? _endDate;

  List<int> _originalNotificationIds = [];

  EditMedicationDataProvider({
    required this.nameController,
    required this.dosageController,
  });

  bool get isLoading => _isLoading;
  File? get capturedImage => _capturedImage;
  String? get uploadedImageUrl => _uploadedImageUrl;
  bool get isUploading => _isUploading;
  bool get hasOriginalImage => _hasOriginalImage;

  String get dosageUnit => _dosageUnit;
  String get frequencyType => _frequencyType;
  int get frequencyNumber => _frequencyNumber;

  List<TimeOfDay?> get selectedTimes => _selectedTimes;
  List<bool> get isAutoGeneratedTimes => _isAutoGeneratedTimes;

  Set<int> get selectedWeekdays => _selectedWeekdays;
  Map<int, TimeOfDay?> get weeklyTimes => _weeklyTimes;
  Map<int, bool> get weeklyAutoGenerated => _weeklyAutoGenerated;

  DateTime? get startDate => _startDate;
  DateTime? get endDate => _endDate;

  List<String> get medicineNames => _medicineNames;

  //======== Initialization & Cleanup ========
  Future<void> init(String docId) async {
    _isLoading = true;
    await _loadMedicineNames();
    await loadMedicationData(docId);
    _isLoading = false;
  }

  void dispose() {
    nameController.dispose();
    dosageController.dispose();
    pageController.dispose();
  }

  //======== Data Loading ========
  Future<void> _loadMedicineNames() async {
    try {
      final raw = await rootBundle.loadString('assets/Mediciens/trade_names.json');
      final list = json.decode(raw) as List<dynamic>;
      _medicineNames = list.map((e) => e.toString()).toList();
    } catch (e) {
      _medicineNames = [];
    }
  }

  Future<void> loadMedicationData(String docId) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) throw Exception('User not logged in');
    final doc = await FirebaseFirestore.instance
        .collection('users')
        .doc(user.uid)
        .collection('medicines')
        .doc(docId)
        .get();
    if (!doc.exists) throw Exception('Medicine not found');

    final data = doc.data()!;
    nameController.text = data['name'] ?? '';
    _parseDosage(data['dosage'] as String?);
    _frequencyType = data['frequencyType'] ?? 'يومي';
    _frequencyNumber = (data['frequencyDetails']?['timesPerDay'] as int?) ?? 1;
    _parseTimes(data['times'] as List<dynamic>?);
    _parseWeekly(data['frequencyDetails'] as Map<String, dynamic>?);
    _startDate = (data['startDate'] as Timestamp?)?.toDate();
    _endDate   = (data['endDate']   as Timestamp?)?.toDate();

    final url = data['imageUrl'] as String?;
    if (url != null && url.isNotEmpty) {
      _uploadedImageUrl = url;
      _hasOriginalImage = true;
    }
    _originalNotificationIds = List<int>.from(data['notificationIds'] ?? []);
  }

  void _parseDosage(String? dosage) {
    if (dosage == null) return;
    final parts = dosage.split(' ');
    if (parts.length >= 2) {
      dosageController.text = parts[0];
      _dosageUnit = parts.sublist(1).join(' ');
    }
  }

  void _parseTimes(List<dynamic>? timesList) {
    if (_frequencyType == 'يومي') {
      final t = timesList ?? [];
      _selectedTimes = List<TimeOfDay?>.filled(_frequencyNumber, null, growable: true);
      _isAutoGeneratedTimes = List<bool>.filled(_frequencyNumber, false, growable: true);
      for (var i = 0; i < t.length && i < _frequencyNumber; i++) {
        final str = t[i] as String;
        _selectedTimes[i] = TimeUtils.parseTime(str);
      }
    }
  }

  void _parseWeekly(Map<String, dynamic>? freqDetails) {
    if (_frequencyType != 'اسبوعي' || freqDetails == null) return;
    final days = List<int>.from(freqDetails['selectedWeekdays'] ?? []);
    _selectedWeekdays = days.toSet();
    // we'll populate times below...
  }

  //======== Image Capture & Upload ========
  Future<void> pickImage() async {
    final status = await Permission.camera.request();
    if (!status.isGranted) throw Exception('Camera permission denied');
    final result = await ImagePicker().pickImage(source: ImageSource.camera);
    if (result == null) return;

    _capturedImage = File(result.path);
    _isUploading = true;
    _uploadedImageUrl = await _uploadToImgBB(_capturedImage!);
    _isUploading = false;
  }

  Future<String> _uploadToImgBB(File file) async {
    final bytes = await file.readAsBytes();
    final b64 = base64Encode(bytes);
    final url = Uri.parse('https://api.imgbb.com/1/upload?key=$imgbbApiKey');
    final resp = await http.post(url, body: {'image': b64});
    if (resp.statusCode != 200) throw Exception('ImgBB upload failed');
    final jsonResp = json.decode(resp.body);
    return jsonResp['data']['url'] as String;
  }

  //======== Saving ========
  Future<void> updateMedication(String docId) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) throw Exception('User not logged in');
    final updated = <String, dynamic>{
      'name': nameController.text.trim(),
      'dosage': '${dosageController.text.trim()} $_dosageUnit',
      'frequencyType': _frequencyType,
      'frequencyDetails': _frequencyType == 'يومي'
          ? {'timesPerDay': _frequencyNumber}
          : {'selectedWeekdays': _selectedWeekdays.toList()..sort()},
      'times': _frequencyType == 'يومي'
          ? _selectedTimes.map((t) => TimeUtils.formatTimeOfDay(t!)).toList()
          : _weeklyTimes.entries
          .map((e) => {'day': e.key, 'time': TimeUtils.formatTimeOfDay(e.value!)})
          .toList(),
      'startDate': _startDate != null ? Timestamp.fromDate(_startDate!) : null,
      'endDate':   _endDate   != null ? Timestamp.fromDate(_endDate!)   : null,
      'lastUpdated': Timestamp.now(),
    };
    if (_uploadedImageUrl != null) updated['imageUrl'] = _uploadedImageUrl;
    await FirebaseFirestore.instance
        .collection('users')
        .doc(user.uid)
        .collection('medicines')
        .doc(docId)
        .update(updated);
  }
}

// Pull in your TimeUtils from below (or import from utils file)
class TimeUtils {
  static TimeOfDay? parseTime(String timeStr) {
    try {
      final f = DateFormat('h:mm a', 'ar'); // changed locale here
      return TimeOfDay.fromDateTime(f.parseStrict(timeStr));
    } catch (_) {}
    return null;
  }

  static String formatTimeOfDay(TimeOfDay t) {
    final dt = DateTime(0, 0, 0, t.hour, t.minute);
    return DateFormat.jm('ar').format(dt);
  }
}

