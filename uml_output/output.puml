@startuml
class _PluginRegistrant {
---
register(): void
}
class TimeUtils {
---
-timeFormat: DateFormat
-parsingFormat: DateFormat
parseTime(): TimeOfDay?
formatTimeOfDay(): String
}
TimeUtils ..> DateFormat
class EditMedicationDataProvider {
---
nameController: TextEditingController
dosageController: TextEditingController
pageController: PageController
imgbbApiKey: String
-medicineNames: List<String>
-capturedImage: File?
-uploadedImageUrl: String?
-imgbbDeleteHash: String?
-isUploading: bool
-isLoading: bool
-hasOriginalImage: bool
-dosageUnit: String
-frequencyType: String
-frequencyNumber: int
-selectedTimes: List<TimeOfDay?>
-isAutoGeneratedTimes: List<bool>
-selectedWeekdays: Set<int>
-weeklyTimes: Map<int, TimeOfDay?>
-weeklyAutoGenerated: Map<int, bool>
-startDate: DateTime?
-endDate: DateTime?
-originalNotificationIds: List<int>
isLoading(): bool
capturedImage(): File?
uploadedImageUrl(): String?
isUploading(): bool
hasOriginalImage(): bool
dosageUnit(): String
frequencyType(): String
frequencyNumber(): int
selectedTimes(): TimeOfDay?[0..*]
isAutoGeneratedTimes(): bool[0..*]
selectedWeekdays(): Set<int
weeklyTimes(): Map<int, TimeOfDay?
weeklyAutoGenerated(): Map<int, bool
startDate(): DateTime?
endDate(): DateTime?
medicineNames(): String[0..*]
init(): void
dispose(): void
-_loadMedicineNames(): void
loadMedicationData(): void
-_parseDosage(): void
-_loadDailyTimes(): void
-_loadWeeklyTimesAndDays(): void
updateDosageUnit(): void
updateFrequencyType(): void
updateFrequencyNumber(): void
selectDailyTime(): void
toggleWeekday(): void
selectWeeklyTime(): void
updateStartDate(): void
updateEndDate(): void
-_updateTimeFields(): void
-_autoFillDosageTimes(): void
-_initializeWeeklySchedule(): void
pickImage(): void
-_uploadToImgBB(): Map<String, String
updateMedication(): void
deleteOldImageIfReplaced(): void
-_deleteImgBBImage(): void
}
EditMedicationDataProvider ..> TextEditingController
EditMedicationDataProvider ..> PageController
EditMedicationDataProvider ..> File
EditMedicationDataProvider ..> DateTime
class EditMedicationUtils {
---
parseTime(): TimeOfDay?
formatTimeOfDay(): String
calculateDays(): int
ensureCameraPermission(): void
uploadToImgBB(): String
}
class EditMedicationDataProvider {
---
nameController: TextEditingController
dosageController: TextEditingController
pageController: PageController
imgbbApiKey: String
-isLoading: bool
-capturedImage: File?
-uploadedImageUrl: String?
-isUploading: bool
-hasOriginalImage: bool
-medicineNames: List<String>
-dosageUnit: String
-frequencyType: String
-frequencyNumber: int
-selectedTimes: List<TimeOfDay?>
-isAutoGeneratedTimes: List<bool>
-selectedWeekdays: Set<int>
-weeklyTimes: Map<int, TimeOfDay?>
-weeklyAutoGenerated: Map<int, bool>
-startDate: DateTime?
-endDate: DateTime?
-originalNotificationIds: List<int>
isLoading(): bool
capturedImage(): File?
uploadedImageUrl(): String?
isUploading(): bool
hasOriginalImage(): bool
medicineNames(): String[0..*]
dosageUnit(): String
frequencyType(): String
frequencyNumber(): int
selectedTimes(): TimeOfDay?[0..*]
isAutoGeneratedTimes(): bool[0..*]
selectedWeekdays(): Set<int
weeklyTimes(): Map<int, TimeOfDay?
weeklyAutoGenerated(): Map<int, bool
startDate(): DateTime?
endDate(): DateTime?
init(): void
dispose(): void
-_loadMedicineNames(): void
loadMedicationData(): void
-_parseDosage(): void
-_parseTimes(): void
-_parseWeekly(): void
updateDosageUnit(): void
updateFrequencyType(): void
updateFrequencyNumber(): void
selectDailyTime(): void
toggleWeekday(): void
selectWeeklyTime(): void
updateStartDate(): void
updateEndDate(): void
-_updateTimeFields(): void
-_autoFillDosageTimes(): void
-_initializeWeeklySchedule(): void
pickImage(): void
updateMedication(): void
}
EditMedicationDataProvider ..> TextEditingController
EditMedicationDataProvider ..> PageController
EditMedicationDataProvider ..> File
EditMedicationDataProvider ..> DateTime
class EditMedicationScreen {
---
docId: String
createState(): _EditMedicationScreenState
}
StatefulWidget <|-- EditMedicationScreen
class _EditMedicationScreenState {
---
dp: EditMedicationDataProvider
initState(): void
dispose(): void
build(): Widget
}
State <|-- _EditMedicationScreenState
_EditMedicationScreenState ..> EditMedicationDataProvider
class EditMedicationUtils {
---
parseTime(): TimeOfDay?
formatTimeOfDay(): String
calculateDays(): int
ensureCameraPermission(): void
uploadToImgBB(): String
}
class MyApp {
---
build(): Widget
}
StatelessWidget <|-- MyApp
class DoseScheduleServices {
---
user: User?
fetchDoses(): Map<DateTime, MapString, dynamic[0..*]
checkDoseStatus(): String
toggleDoseStatus(): bool
finishMedication(): bool
deleteMedication(): bool
-_deleteImgBBImage(): void
isSameDay(): bool
}
DoseScheduleServices ..> User
class EnlargeableImage {
---
imageUrl: String
width: double
height: double
docId: String
createState(): _EnlargeableImageState
}
StatefulWidget <|-- EnlargeableImage
class _EnlargeableImageState {
---
-imageFileFuture: Future<File?>
initState(): void
didUpdateWidget(): void
-_downloadAndSaveImage(): File?
-_openEnlargedImage(): void
build(): Widget
-_buildPlaceholder(): Widget
}
State <|-- _EnlargeableImageState
_EnlargeableImageState ..> Future
class DoseTile {
---
medicationName: String
nextDose: String
docId: String
imageUrl: String
imgbbDeleteHash: String
onDataChanged: VoidCallback
selectedDay: DateTime
createState(): _DoseTileState
}
StatefulWidget <|-- DoseTile
DoseTile ..> VoidCallback
DoseTile ..> DateTime
class _DoseTileState {
---
-isExpanded: bool
-doseStatus: String
-isLoadingStatus: bool
-animationController: AnimationController
-expandAnimation: Animation<double>
-services: DoseScheduleServices
initState(): void
dispose(): void
didUpdateWidget(): void
-_isSameDay(): bool
-_checkDoseStatus(): void
-_toggleDoseStatus(): void
-_showConfirmationDialog(): bool?
-_handleEdit(): void
-_handleFinishMed(): void
-_handleDelete(): void
-_deleteMedication(): void
build(): Widget
-_buildActionButton(): Widget
}
State <|-- _DoseTileState
_DoseTileState ..> AnimationController
_DoseTileState ..> Animation
_DoseTileState ..> DoseScheduleServices
class CalendarWidget {
---
focusedDay: DateTime
selectedDay: DateTime
calendarFormat: CalendarFormat
onDaySelected:  Function(DateTime, DateTime)
onFormatChanged:  Function(CalendarFormat)
onPageChanged:  Function(DateTime)
getEventsForDay:  Function(DateTime)
build(): Widget
}
StatelessWidget <|-- CalendarWidget
CalendarWidget ..> DateTime
CalendarWidget ..> CalendarFormat
class TimeUtils {
---
parseTime(): TimeOfDay?
formatTimeOfDay(): String
}
class ServiceResult {
---
success: bool
data: T?
error: String?
succeeded(): ServiceResult<T
failed(): ServiceResult<T
}
ServiceResult ..> T
class MedicationDetailService {
---
-firestore: FirebaseFirestore
-auth: FirebaseAuth
loadMedicationData(): ServiceResult<Map<String, dynamic
recordMedicationConfirmation(): ServiceResult<bool
recordMedicationRescheduling(): ServiceResult<bool
-_updateMissedDosesField(): void
-_updateRescheduledTime(): void
-_isTimeApproximatelyEqual(): bool
generateSmartReschedulingSuggestions(): TimeOfDay[0..*]
getDoseHistory(): ServiceResult<MapString, dynamic[0..*]
updateMedicationInfo(): ServiceResult<bool
-_parseTime(): TimeOfDay?
-_isTimeInFuture(): bool
-_isTimeCloseToAny(): bool
-_getTimeDifferenceInMinutes(): int
-_addHoursToTime(): TimeOfDay
-_compareTimeOfDay(): int
}
MedicationDetailService ..> FirebaseFirestore
MedicationDetailService ..> FirebaseAuth
class MedicationDetailUIComponents {
---
updateState: Function
handleConfirmation:  Function(bool)
handleReschedule:  Function()
showCustomTimePickerDialog:  Function()
showManualTimePickerDialog:  Function()
setReschedulingModeTrue:  Function()
setReschedulingModeFalse:  Function()
selectSuggestedTime:  Function(TimeOfDay)
buildErrorView(): Widget
buildActionSection(): Widget
buildEnhancedConfirmationSection(): Widget
buildReschedulingSection(): Widget
buildMedicationInfoCard(): Widget
buildScheduleInfoCard(): Widget
-_buildDaysOfWeekRow(): Widget
-_buildTimeSlotsGrid(): Widget
}
MedicationDetailUIComponents ..> Function
class TimeUtilities {
---
formatTimeOfDay(): String
isTimeInFuture(): bool
timeOfDayToDateTime(): DateTime
timeOfDayToTZDateTime(): tz.TZDateTime
addHoursToTime(): TimeOfDay
compareTimeOfDay(): int
getTimeDifferenceInMinutes(): int
isTimeCloseToOther(): bool
formatDate(): String
}
class AddDosagePage {
---
formKey: GlobalKey<FormState>
dosageController: TextEditingController
dosageUnit: String
dosageUnits: List<String>
frequencyType: String
frequencyTypes: List<String>
frequencyNumber: int
frequencyNumbers: List<int>
selectedTimes: List<TimeOfDay?>
isAutoGeneratedTimes: List<bool>
selectedWeekdays: Set<int>
weeklyTimes: Map<int, TimeOfDay?>
weeklyAutoGenerated: Map<int, bool>
onDosageUnitChanged:  Function(String?)
onFrequencyNumberChanged:  Function(int?)
onFrequencyTypeChanged:  Function(String?)
onSelectTime:  Function(int)
onWeekdaySelected:  Function(int, bool)
onSelectWeeklyTime:  Function(int)
onApplySameTimeToAllWeekdays: VoidCallback
onNext: VoidCallback
onBack: VoidCallback
getDayName: String Function(int)
-_buildWeeklyScheduleSection(): Widget
build(): Widget
}
StatelessWidget <|-- AddDosagePage
AddDosagePage ..> GlobalKey
AddDosagePage ..> TextEditingController
AddDosagePage ..> VoidCallback
class MedicineAutocomplete {
---
suggestions: List<String>
controller: TextEditingController
focusNode: FocusNode
onSelected: void Function(String)
createState(): _MedicineAutocompleteState
}
StatefulWidget <|-- MedicineAutocomplete
MedicineAutocomplete ..> TextEditingController
MedicineAutocomplete ..> FocusNode
class _MedicineAutocompleteState {
---
-filteredSuggestions: List<String>
-scrollController: ScrollController
-initialDisplayCount: int
initState(): void
-_filter(): void
-_handleFocusChange(): void
dispose(): void
-_highlightMatchingText(): Widget
build(): Widget
}
State <|-- _MedicineAutocompleteState
_MedicineAutocompleteState ..> ScrollController
class AddNamePicturePage {
---
formKey: GlobalKey<FormState>
nameController: TextEditingController
medicineNamesFuture: Future<List<String>>
capturedImage: File?
uploadedImageUrl: String?
onPickImage: VoidCallback
onNext: VoidCallback
onBack: VoidCallback
createState(): _AddNamePicturePageState
}
StatefulWidget <|-- AddNamePicturePage
AddNamePicturePage ..> GlobalKey
AddNamePicturePage ..> TextEditingController
AddNamePicturePage ..> Future
AddNamePicturePage ..> File
AddNamePicturePage ..> VoidCallback
class _AddNamePicturePageState {
---
-medicineFocusNode: FocusNode
initState(): void
dispose(): void
-_buildImagePicker(): Widget
build(): Widget
}
State <|-- _AddNamePicturePageState
_AddNamePicturePageState ..> FocusNode
class AddStartEndDatePage {
---
formKey: GlobalKey<FormState>
startDate: DateTime?
endDate: DateTime?
onSelectStartDate: VoidCallback
onSelectEndDate: VoidCallback
onSubmit: VoidCallback
onBack: VoidCallback
onClearEndDate: VoidCallback?
build(): Widget
-_buildDateChip(): Widget
-_buildDateArrow(): Widget
-_calculateDuration(): int
}
StatelessWidget <|-- AddStartEndDatePage
AddStartEndDatePage ..> GlobalKey
AddStartEndDatePage ..> DateTime
AddStartEndDatePage ..> VoidCallback
class TimeUtils {
---
parseTime(): TimeOfDay?
formatTimeOfDay(): String
}
class AddDose {
---
createState(): State<AddDose
}
StatefulWidget <|-- AddDose
class _AddDoseState {
---
imgbbApiKey: String
-pageController: PageController
-formKeyPage1: GlobalKey<FormState>
-formKeyPage2: GlobalKey<FormState>
-formKeyPage3: GlobalKey<FormState>
-nameController: TextEditingController
-dosageController: TextEditingController
-dosageUnit: String
-selectedTimes: List<TimeOfDay?>
-isAutoGeneratedTimes: List<bool>
-frequencyType: String
-frequencyNumber: int
-startDate: DateTime?
-endDate: DateTime?
-medicineNamesFuture: Future<List<String>>
-capturedImage: File?
-uploadedImageUrl: String?
-isUploading: bool
-dosageUnits: List<String>
-frequencyTypes: List<String>
-frequencyNumbers: List<int>
-weeklyTimes: Map<int, TimeOfDay?>
-weeklyAutoGenerated: Map<int, bool>
-selectedWeekdays: Set<int>
initState(): void
dispose(): void
-_loadMedicineNames(): String[0..*]
-_updateTimeFields(): void
-_autoFillDosageTimes(): void
-_initializeWeeklySchedule(): void
-_selectStartDate(): void
-_selectEndDate(): void
-_selectTime(): void
-_selectWeeklyTime(): void
-_handleWeekdaySelected(): void
-_handleApplySameTimeToAllWeekdays(): void
-_pickImage(): void
-_uploadImageToImgBB(): String?
-_nextPage(): void
-_previousPage(): void
-_submitForm(): void
-_showBlockingAlert(): void
-_dayName(): String
scheduleDailyRepeatingNotification(): void
scheduleWeeklyRepeatingNotification(): void
build(): Widget
}
State <|-- _AddDoseState
_AddDoseState ..> PageController
_AddDoseState ..> GlobalKey
_AddDoseState ..> TextEditingController
_AddDoseState ..> DateTime
_AddDoseState ..> Future
_AddDoseState ..> File
class CompanionDetailPage {
---
email: String
name: String
createState(): _CompanionDetailPageState
}
StatefulWidget <|-- CompanionDetailPage
class _CompanionDetailPageState {
---
companionUid: String?
isLoading: bool
-doses: Map<DateTime, List<Map<String, dynamic>>>
-selectedDay: DateTime
-focusedDay: DateTime
-calendarFormat: CalendarFormat
initState(): void
-_loadCompanionData(): void
-_fetchDoses(): void
-_isDoseTaken(): bool
-_parseTime(): TimeOfDay?
-_formatTimeOfDay(): String
-_getDosesForDay(): MapString, dynamic[0..*]
build(): Widget
-_navigateToAddMedication(): void
-_buildDoseList(): Widget
-_showMedicationOptions(): void
-_navigateToEditMedication(): void
-_confirmEndMedication(): void
-_endMedication(): void
-_confirmDeleteMedication(): void
-_deleteMedication(): void
}
State <|-- _CompanionDetailPageState
_CompanionDetailPageState ..> DateTime
_CompanionDetailPageState ..> CalendarFormat
class AddCompanionMedicationPage {
---
companionId: String
companionName: String
build(): Widget
}
StatelessWidget <|-- AddCompanionMedicationPage
class EditCompanionMedicationPage {
---
companionId: String
medicationId: String
companionName: String
build(): Widget
}
StatelessWidget <|-- EditCompanionMedicationPage
class Companions {
---
createState(): State<Companions
}
StatefulWidget <|-- Companions
class _CompanionsState {
---
user: null
companionsRef: CollectionReference
companionDataList: List<Map<String, dynamic>>
isLoading: bool
initState(): void
-_loadCompanions(): void
-_getUpcomingDoseCount(): int
-_deleteCompanion(): void
-_navigateToDetail(): void
build(): Widget
-_buildEmptyState(): Widget
-_buildCompanionsList(): Widget
-_buildCompanionCard(): Widget
-_showAddCompanionDialog(): void
}
State <|-- _CompanionsState
_CompanionsState ..> CollectionReference
class TimeUtils {
---
-timeFormat: DateFormat
-parsingFormat: DateFormat
parseTime(): TimeOfDay?
formatTimeOfDay(): String
}
TimeUtils ..> DateFormat
class EditMedicationUtils {
---
ensureCameraPermission(): void
uploadToImgBB(): Map<String, String
deleteImgBBImage(): void
}
class EditMedicationDataProvider {
---
nameController: TextEditingController
dosageController: TextEditingController
pageController: PageController
imgbbApiKey: String
-isLoading: bool
-capturedImage: File?
-uploadedImageUrl: String?
-originalImageUrl: String?
-imgbbDeleteHash: String?
-originalImgbbDeleteHash: String?
-isUploading: bool
-hasOriginalImage: bool
-medicineNames: List<String>
-dosageUnit: String
-frequencyType: String
-frequencyNumber: int
-selectedTimes: List<TimeOfDay?>
-isAutoGeneratedTimes: List<bool>
-selectedWeekdays: Set<int>
-weeklyTimes: Map<int, TimeOfDay?>
-weeklyAutoGenerated: Map<int, bool>
-startDate: DateTime?
-endDate: DateTime?
-originalNotificationIds: List<int>
isLoading(): bool
capturedImage(): File?
displayImageUrl(): String?
isUploading(): bool
medicineNames(): String[0..*]
dosageUnit(): String
frequencyType(): String
frequencyNumber(): int
selectedTimes(): TimeOfDay?[0..*]
isAutoGeneratedTimes(): bool[0..*]
selectedWeekdays(): Set<int
weeklyTimes(): Map<int, TimeOfDay?
weeklyAutoGenerated(): Map<int, bool
startDate(): DateTime?
endDate(): DateTime?
init(): void
dispose(): void
-_loadMedicineNames(): void
loadMedicationData(): void
-_parseDosage(): void
-_loadDailyTimes(): void
-_loadWeeklyTimesAndDays(): void
pickImage(): void
updateMedication(): void
updateDosageUnit(): void
updateFrequencyType(): void
updateFrequencyNumber(): void
selectDailyTime(): void
toggleWeekday(): void
selectWeeklyTime(): void
updateStartDate(): void
updateEndDate(): void
-_updateTimeFields(): void
-_autoFillDosageTimes(): void
-_initializeWeeklySchedule(): void
applySameTimeToAllWeekdays(): void
}
EditMedicationDataProvider ..> TextEditingController
EditMedicationDataProvider ..> PageController
EditMedicationDataProvider ..> File
EditMedicationDataProvider ..> DateTime
class EditMedicationScreen {
---
docId: String
createState(): _EditMedicationScreenState
}
StatefulWidget <|-- EditMedicationScreen
class _EditMedicationScreenState {
---
dp: EditMedicationDataProvider
-page1FormKey: GlobalKey<FormState>
-page2FormKey: GlobalKey<FormState>
-page3FormKey: GlobalKey<FormState>
initState(): void
-_initializeData(): void
dispose(): void
-_showErrorSnackBar(): void
-_nextPage(): void
-_previousPage(): void
-_submitForm(): void
build(): Widget
}
State <|-- _EditMedicationScreenState
_EditMedicationScreenState ..> EditMedicationDataProvider
_EditMedicationScreenState ..> GlobalKey
class ForgetPassword {
---
fromPersonalData: bool
createState(): _ForgetPasswordState
}
StatefulWidget <|-- ForgetPassword
class _ForgetPasswordState {
---
-formKey: null
-emailController: TextEditingController
-isLoading: bool
-errorMessage: String?
-isSuccess: bool
dispose(): void
-_resetPassword(): void
build(): Widget
}
State <|-- _ForgetPasswordState
_ForgetPasswordState ..> TextEditingController
class Login {
---
createState(): _LoginState
}
StatefulWidget <|-- Login
class _LoginState {
---
-controller: AnimationController
-animation: Animation<double>
-emailController: TextEditingController
-passwordController: TextEditingController
-emailError: String
-passwordError: String
-loginError: String
-isSubmitted: bool
-obscurePassword: bool
initState(): void
-_validateEmail(): String
-_validatePassword(): String
-_login(): void
build(): Widget
dispose(): void
}
State <|-- _LoginState
_LoginState ..> AnimationController
_LoginState ..> Animation
_LoginState ..> TextEditingController
class MainPage {
---
createState(): _MainPageState
}
StatefulWidget <|-- MainPage
class _MainPageState {
---
-selectedIndex: int
-userName: String
-closestMedName: String
-closestMedTimeStr: String
-closestMedDocId: String
-nextDoseDateTime: DateTime?
-isLoadingMed: bool
-isInitializing: bool
-animationController: AnimationController
-fadeInAnimation: Animation<double>
-isAuthenticated: bool
-currentUser: User?
initState(): void
-_initializePage(): void
-_handleAuthStateChange(): void
-_loadUserDataAndSchedule(): void
dispose(): void
-_scheduleAllUserMedications(): void
-_calculateNextDoseTimes(): tz.TZDateTime[0..*]
-_checkAndShowConfirmationIfNeeded(): void
-_loadUserName(): void
-_loadClosestMedDisplayData(): void
-_parseTime(): TimeOfDay?
-_formatTimeOfDay(): String
-_getRandomMedicationId(): String?
-_triggerTestNotification(): void
-_testMedicationDetailNavigation(): void
-_onItemTapped(): void
build(): Widget
-_getGreeting(): String
-_buildLoginSection(): Widget
-_buildUpcomingDoseSection(): Widget
-_buildLoadingIndicator(): Widget
-_buildEmptyDoseIndicator(): Widget
-_buildActionCardsSection(): Widget
-_buildDevelopmentToolsSection(): Widget
-_showLoginRequiredDialog(): void
}
State <|-- _MainPageState
_MainPageState ..> DateTime
_MainPageState ..> AnimationController
_MainPageState ..> Animation
_MainPageState ..> User
class DoseTile {
---
medicationName: String
nextDose: String
docId: String
doseDateTime: DateTime?
build(): Widget
-_buildMedicationIcon(): Widget
-_buildTimeDisplay(): Widget
}
StatelessWidget <|-- DoseTile
DoseTile ..> DateTime
class EnhancedActionCard {
---
icon: IconData
label: String
description: String?
color: Color
onTap: VoidCallback
isHorizontal: bool
build(): Widget
-_buildVerticalLayout(): Widget
-_buildHorizontalLayout(): Widget
}
StatelessWidget <|-- EnhancedActionCard
EnhancedActionCard ..> IconData
EnhancedActionCard ..> Color
EnhancedActionCard ..> VoidCallback
class MedicationDetailPage {
---
docId: String
openedFromNotification: bool
needsConfirmation: bool
confirmationTimeIso: String?
confirmationKey: String?
createState(): _MedicationDetailPageState
}
StatefulWidget <|-- MedicationDetailPage
class _MedicationDetailPageState {
---
-service: MedicationDetailService
-medData: Map<String, dynamic>?
-isLoading: bool
-errorMessage: String
-isProcessingConfirmation: bool
-isReschedulingMode: bool
-animationController: AnimationController
-fadeAnimation: Animation<double>
-confirmationTimeLocal: tz.TZDateTime?
-manualConfirmationTime: TimeOfDay?
-suggestedTimes: List<TimeOfDay>
-selectedSuggestedTime: TimeOfDay?
-customSelectedTime: TimeOfDay?
-customTimeController: TextEditingController
-uiComponents: MedicationDetailUIComponents
initState(): void
-_updateState(): void
-_setReschedulingModeTrue(): void
-_setReschedulingModeFalse(): void
-_selectSuggestedTime(): void
dispose(): void
-_logAction(): void
-_showErrorAndLog(): void
-_loadMedicationData(): void
-_generateSmartReschedulingSuggestions(): void
-_handleConfirmation(): void
-_handleReschedule(): void
-_showCustomTimePickerDialog(): void
-_showManualTimePickerDialog(): void
build(): Widget
-_buildBody(): Widget
}
State <|-- _MedicationDetailPageState
_MedicationDetailPageState ..> MedicationDetailService
_MedicationDetailPageState ..> AnimationController
_MedicationDetailPageState ..> Animation
_MedicationDetailPageState ..> tz.TZDateTime
_MedicationDetailPageState ..> TimeOfDay
_MedicationDetailPageState ..> TextEditingController
_MedicationDetailPageState ..> MedicationDetailUIComponents
class DoseSchedule {
---
createState(): _DoseScheduleState
}
StatefulWidget <|-- DoseSchedule
class _DoseScheduleState {
---
-user: User?
-calendarFormat: CalendarFormat
-doses: Map<DateTime, List<Map<String, dynamic>>>
-selectedDay: DateTime
-focusedDay: DateTime
-isLoading: bool
-services: DoseScheduleServices
initState(): void
-_fetchDoses(): void
-_getEventsForDay(): MapString, dynamic[0..*]
build(): Widget
-_buildDoseList(): Widget
}
State <|-- _DoseScheduleState
_DoseScheduleState ..> User
_DoseScheduleState ..> CalendarFormat
_DoseScheduleState ..> DateTime
_DoseScheduleState ..> DoseScheduleServices
class PersonalDataPage {
---
createState(): _PersonalDataPageState
}
StatefulWidget <|-- PersonalDataPage
class _PersonalDataPageState {
---
-selectedIndex: int
-username: String
-email: String
-isLoading: bool
-animationController: AnimationController
-fadeInAnimation: Animation<double>
-usernameController: TextEditingController
-newEmailController: TextEditingController
-currentPasswordController: TextEditingController
-isUpdating: bool
-verificationEmailSent: bool
initState(): void
dispose(): void
fetchUserData(): void
-_onItemTapped(): void
-_showEditProfileDialog(): void
-_showVerifyUserDialog(): void
-_sendVerificationEmail(): bool
-_updateProfile(): void
build(): Widget
-_buildSectionHeader(): Widget
-_buildInfoRow(): Widget
-_buildActionButton(): Widget
}
State <|-- _PersonalDataPageState
_PersonalDataPageState ..> AnimationController
_PersonalDataPageState ..> Animation
_PersonalDataPageState ..> TextEditingController
class SettingsPage {
---
createState(): _SettingsPageState
}
StatefulWidget <|-- SettingsPage
class _SettingsPageState {
---
-selectedIndex: int
-appVersion: String
initState(): void
-_fetchAppVersion(): void
build(): Widget
-_buildSectionHeader(): Widget
}
State <|-- _SettingsPageState
class SettingTile {
---
icon: IconData
title: String
subtitle: String
trailing: Widget?
onTap: VoidCallback?
build(): Widget
}
StatelessWidget <|-- SettingTile
SettingTile ..> IconData
SettingTile ..> Widget
SettingTile ..> VoidCallback
class Signup {
---
createState(): _SignupState
}
StatefulWidget <|-- Signup
class _SignupState {
---
-controller: AnimationController
-animation: Animation<double>
-nameController: TextEditingController
-emailController: TextEditingController
-passwordController: TextEditingController
-confirmPasswordController: TextEditingController
-obscurePassword: bool
-obscureConfirmPassword: bool
-nameError: String
-emailError: String
-passwordError: String
-confirmPasswordError: String
-signupError: String
-isSubmitted: bool
initState(): void
-_validateEmail(): String
-_validatePassword(): String
-_registerUser(): void
build(): Widget
dispose(): void
}
State <|-- _SignupState
_SignupState ..> AnimationController
_SignupState ..> Animation
_SignupState ..> TextEditingController
class Welcome {
---
createState(): _WelcomeState
}
StatefulWidget <|-- Welcome
class _WelcomeState {
---
-controller: AnimationController
-animation: Animation<double>
initState(): void
build(): Widget
-_buildSocialIcon(): Widget
dispose(): void
}
State <|-- _WelcomeState
_WelcomeState ..> AnimationController
_WelcomeState ..> Animation
class AlarmNotificationHelper {
---
-service: NotificationService
notificationsPlugin(): FlutterLocalNotificationsPlugin
initialize(): void
ensureChannelsSetup(): void
-_onNotificationResponse(): void
-_navigateToMedicationDetail(): void
-_handleSnooze(): void
scheduleAlarmNotification(): void
scheduleDailyRepeatingNotification(): void
scheduleWeeklyRepeatingNotification(): void
-_nextInstanceOfTime(): tz.TZDateTime
-_nextInstanceOfWeekday(): tz.TZDateTime
generateNotificationId(): int
cancelNotification(): void
cancelAllNotifications(): void
getPendingNotifications(): PendingNotificationRequest[0..*]
checkForNotificationPermissions(): bool?
}
AlarmNotificationHelper ..> NotificationService
class AndroidNotificationService {
---
-notificationsPlugin: FlutterLocalNotificationsPlugin
notificationsPlugin(): FlutterLocalNotificationsPlugin
initialize(): void
setupNotificationChannels(): void
requestPermissions(): void
scheduleAlarmNotification(): void
-_adjustTimeForRepeat(): tz.TZDateTime
-_nextInstanceOfTime(): tz.TZDateTime
-_nextInstanceOfWeekday(): tz.TZDateTime
cancelNotification(): void
cancelAllNotifications(): void
getPendingNotifications(): PendingNotificationRequest[0..*]
checkNotificationPermissions(): bool?
}
AndroidNotificationService ..> FlutterLocalNotificationsPlugin
AndroidNotificationService ..|> NotificationService
class DefaultFirebaseOptions {
---
web: FirebaseOptions
android: FirebaseOptions
currentPlatform(): FirebaseOptions
}
DefaultFirebaseOptions ..> FirebaseOptions
class IOSNotificationService {
---
-notificationsPlugin: FlutterLocalNotificationsPlugin
notificationsPlugin(): FlutterLocalNotificationsPlugin
initialize(): void
setupNotificationChannels(): void
-_setNotificationCategories(): void
requestPermissions(): void
scheduleAlarmNotification(): void
-_adjustTimeForRepeat(): tz.TZDateTime
-_nextInstanceOfTime(): tz.TZDateTime
-_nextInstanceOfWeekday(): tz.TZDateTime
cancelNotification(): void
cancelAllNotifications(): void
getPendingNotifications(): PendingNotificationRequest[0..*]
checkNotificationPermissions(): bool?
}
IOSNotificationService ..> FlutterLocalNotificationsPlugin
IOSNotificationService ..|> NotificationService
abstract class NotificationService {
---
notificationsPlugin(): FlutterLocalNotificationsPlugin
initialize(): void
setupNotificationChannels(): void
requestPermissions(): void
scheduleAlarmNotification(): void
cancelNotification(): void
cancelAllNotifications(): void
getPendingNotifications(): PendingNotificationRequest[0..*]
checkNotificationPermissions(): bool?
}
class AuthWrapper {
---
createState(): State<AuthWrapper
}
StatefulWidget <|-- AuthWrapper
class _AuthWrapperState {
---
-isLoading: bool
-isAuthenticated: bool
initState(): void
-_checkAuth(): void
build(): Widget
}
State <|-- _AuthWrapperState
class CustomBottomNavigationBar {
---
selectedIndex: int
onItemTapped:  Function(int)
build(): Widget
-_buildNavItem(): BottomNavigationBarItem
}
StatelessWidget <|-- CustomBottomNavigationBar
@enduml